# AI_programms
class Node:
    def __init__(self, data, level, fval):

        # initializing values
        self.data = data
        self.level = level
        self.fval = fval

    def generate_child(self):

        # generate child with 4 possibilities
        x, y = self.find(self.data, '_')

        val_list = [[x, y - 1], [x, y + 1], [x - 1, y], [x + 1, y]]  # possible values
        children = []
        for i in val_list:
            child = self.shuffle(self.data, x, y, i[0], i[1])
            if child is not None:
                child_node = Node(child, self.level + 1, 0)
                children.append(child_node)
        return children

    def shuffle(self, puz, x1, y1, x2, y2):

        # checking if moved position are valid
        if x2 >= 0 and x2 < len(self.data) and y2 >= 0 and y2 < len(self.data):
            temp_puz = []
            temp_puz = self.copy(puz)
            temp = temp_puz[x2][y2]
            temp_puz[x2][y2] = temp_puz[x1][y1]
            temp_puz[x1][y1] = temp
            return temp_puz
        else:
            return None

    # copying matrix using temp
    def copy(self, root):

        temp = []
        for i in root:
            t = []
            for j in i:
                t.append(j)
            temp.append(t)
        return temp

        # to find the blank space

    def find(self, puz, x):

        for i in range(0, len(self.data)):
            for j in range(0, len(self.data)):
                if puz[i][j] == x:
                    return i, j


class Puzzle:
    def __init__(self, size):
        # Initializing the puzzle size by given size
        self.n = size
        self.open = []
        self.closed = []

    # allocating input
    def accept(self):

        puz = []
        for i in range(0, self.n):
            temp = input().split(" ")
            puz.append(temp)
        return puz

    def f(self, start, goal):
        # main function f = h + g
        fvalue = self.h(start.data, goal) + start.level
        return self.h(start.data, goal) + start.level

    def h(self, start, goal):

        # calculate h function i.e.difference in final state
        temp = 0
        for i in range(0, self.n):
            for j in range(0, self.n):
                if start[i][j] != goal[i][j] and start[i][j] != '_':
                    temp += 1
        return temp

    def process(self):

        print("Enter the start state matrix \n")
        start = self.accept()
        print("Enter the goal state matrix \n")
        goal = self.accept()

        start = Node(start, 0, 0)
        start.fval = self.f(start, goal)
        fvalue = start.fval
        gvalue = 0
        # putting start node in open list
        self.open.append(start)
        print("\n\n")
        while True:

            cur = self.open[0]
            print("")
            print("  | ")
            print("  | ")
            print(" \\\'/ \n")
            for i in cur.data:
                for j in i:
                    print(j, end=" ")
                print("")
            print('\nf(x)=g(x)+h(x)')
            print('fvalue=', fvalue)
            print('gvalue=', gvalue)
            print('hvalue=', fvalue-gvalue)

            # breaking loop when goal state reached
            if (self.h(cur.data, goal) == 0):
                break

            gvalue += 1
            # generating next child
            for i in cur.generate_child():
                i.fval = self.f(i, goal)
                self.open.append(i)
            # adding current to closed list
            self.closed.append(cur)

            # deleting current from open list
            del self.open[0]

            # sorting open list on fval
            self.open.sort(key=lambda x: x.fval, reverse=False)



puz = Puzzle(3)
puz.process()


